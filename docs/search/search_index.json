{
    "docs": [
        {
            "location": "/",
            "text": "GraphQL Framework\n\n\nOverview\n\n\n\n\nSchema Generator\n: to generate files to be consumed by the \nWebonyx GraphQL library\n.\n\n\nControllers\n: Classes which are consumed by the framework to resolve GraphQL queries.\n\n\nEntry Point\n: Translates entry data to be consumed by the underlying library, and return the underlying library result as properly formatted data according to the input source.\n\n\n\n\nSee \nGetting Started\n for a guide on how to set it up.",
            "title": "GraphQL Framework"
        },
        {
            "location": "/#graphql-framework",
            "text": "",
            "title": "GraphQL Framework"
        },
        {
            "location": "/#overview",
            "text": "Schema Generator : to generate files to be consumed by the  Webonyx GraphQL library .  Controllers : Classes which are consumed by the framework to resolve GraphQL queries.  Entry Point : Translates entry data to be consumed by the underlying library, and return the underlying library result as properly formatted data according to the input source.   See  Getting Started  for a guide on how to set it up.",
            "title": "Overview"
        },
        {
            "location": "/principles/",
            "text": "Principles & Architecture\n\n\nThis framework is built to be as \nsimple\n as possible to use, preferring a \nconvenience-over-configuration\n approach. Although it is aimed to be entirely modular, using its core built-in features will provide a much better experience.\n\n\nWorkflow\n\n\nWhen working with the library, you should follow this workflow:\n\n\n\n\nCreate a GraphQL schema to expose.\n\n\nSetup the \nSchema generator\n\n\nCreate a GraphQL entry point.\n\n\nCreate a Controller for each type in the GraphQL schema.\n\n\nTest your API.\n\n\n\n\nSee \nGetting Started\n for a better starting example.",
            "title": "Principles & Architecture"
        },
        {
            "location": "/principles/#principles-architecture",
            "text": "This framework is built to be as  simple  as possible to use, preferring a  convenience-over-configuration  approach. Although it is aimed to be entirely modular, using its core built-in features will provide a much better experience.",
            "title": "Principles &amp; Architecture"
        },
        {
            "location": "/principles/#workflow",
            "text": "When working with the library, you should follow this workflow:   Create a GraphQL schema to expose.  Setup the  Schema generator  Create a GraphQL entry point.  Create a Controller for each type in the GraphQL schema.  Test your API.   See  Getting Started  for a better starting example.",
            "title": "Workflow"
        },
        {
            "location": "/getting-started/",
            "text": "Getting started\n\n\nBeforehand, it is important to know that this library does not provide a standalone solution. As such, some amount of PHP knowledge is required, and ideally a Web framework should encapsulate the GraphQL endpoint (such as \nLaravel\n, \nSlim\n or \nSymfony\n). All you truly need is a way to read and write \nPSR-7\n objects from/to the client. Afterwards, you can handle incoming HTTP requests as GraphQL requests.\n\n\nRequirements\n\n\n\n\nA project with an initialized composer.json\n\n\nA project with an initialized package.json and Gruntfile.js\n\n\nSome way to read and write PSR-7 request objects to/from the client\n\n\nAn endpoint dedicated to GraphQL\n\n\n\n\nImplementation\n\n\nAssuming you have all three things above, the first thing to do would be to include both the GraphQL Generator and the GraphQL Framework.\n\n\ncomposer require kronostechnologies/graphql-framework\ncomposer require --dev kronostechnologies/graphql-generator\n\n\n\n\nOnce this is done, your PHP dependencies are setup. Next thing, we need a package from npm in order to generate the GraphQL schema for us:\n\n\nnpm install --save-dev grunt-graphql-php-generator\n\n\n\n\nSetting up a schema watcher\n\n\nNow that all the dependencies are installed, you can create your first \n.graphqls\n schema. Let's create it at a specific location to simplify the example, under \ngraphql/schema.graphqls\n:\n\n\nscalar DateTime\nscalar Cursor\n\ninterface Identifiable {\n    id: ID\n}\n\nenum Color {\n    BLUE,\n    RED,\n    YELLOW,\n    GREEN,\n    PURPLE,\n    CYAN\n}\n\ntype Item implements Identifiable {\n    id: ID,\n    name: String,\n    color: Color\n}\n\ntype Query {\n    item(id: ID): Item!\n    items(page: Int, perPage: Int): [Item!]!\n}\n\n\n\n\nOnce created, you will need to adjust your Gruntfile to tell it from which file to generate the schema from/to. Add this to your \nGruntfile.js\n:\n\n\n    'autogen-schema': {\n        options: {\n            source: './graphql/schema.graphqls',\n            destination: './[BaseFolder]/GraphQL/Schema/',\n            generatorCmdPath: './vendor/bin/graphqlgen',\n            namespace: '[BaseNamespace]',\n            deleteAndRecreate: true,\n            runPHPCSFixer: true\n        }\n    }\n\n\n\n\nNow, you can run a Grunt command to generate the files required by the framework for you:\n\n\ngrunt autogen-schema\n\n\n\n\nEntry point\n\n\nThe entry point requires access to a PSR-7 request object, and it will respond in a PSR-7 response. The core requirement to handle a GraphQL is the following:\n\n\n$configuration = GraphQLConfiguration::create()\n    ->setControllersDirectory(__DIR__ . '\\\\[BaseNamespace]\\\\GraphQL\\\\Controllers')\n    ->setGeneratedSchemaDirectory(__DIR__ . '\\\\[BaseNamespace]\\\\GraphQL\\\\GeneratedSchema');\n\n// Assume $request contains the PSR-7 request.\n$entryPoint = new HttpEntryPoint($configuration);\n$response = $entryPoint->executeRequest($request);\n\n// $response contains the PSR-7 response\n\n\n\n\nYou should now be able to query the GraphQL entry point. It will give out its introspection result, but it won't execute any query successfully since we have defined no controller yet.\n\n\nQuery controller\n\n\nLet's define a sample query controller to get a single item. It should be located under \n[BaseDirectory]\\GraphQL\\Controllers\n. Since we want to get the \nitem\n field in the \nQuery\n type defined in the schema higher up, we need a \nQueryController\n:\n\n\n<?php\n\nclass QueryController extends BaseController {\n    public function getItem() {\n        return $this->hydrator->fromSimpleArray(ItemDTO::class, [\n            'id' => $this->context->getArgument('id'),\n        ];\n    }\n}\n\n\n\n\nHere, we simply return an \nItemDTO\n, which is the representation of what querying \nItem\n in an object. These DTOs are made by the generator to aid in development mostly.\n\n\nNow, the following query should work:\n\n\nquery {\n    item(id: 1) {\n        id\n    }\n}",
            "title": "Getting Started"
        },
        {
            "location": "/getting-started/#getting-started",
            "text": "Beforehand, it is important to know that this library does not provide a standalone solution. As such, some amount of PHP knowledge is required, and ideally a Web framework should encapsulate the GraphQL endpoint (such as  Laravel ,  Slim  or  Symfony ). All you truly need is a way to read and write  PSR-7  objects from/to the client. Afterwards, you can handle incoming HTTP requests as GraphQL requests.",
            "title": "Getting started"
        },
        {
            "location": "/getting-started/#requirements",
            "text": "A project with an initialized composer.json  A project with an initialized package.json and Gruntfile.js  Some way to read and write PSR-7 request objects to/from the client  An endpoint dedicated to GraphQL",
            "title": "Requirements"
        },
        {
            "location": "/getting-started/#implementation",
            "text": "Assuming you have all three things above, the first thing to do would be to include both the GraphQL Generator and the GraphQL Framework.  composer require kronostechnologies/graphql-framework\ncomposer require --dev kronostechnologies/graphql-generator  Once this is done, your PHP dependencies are setup. Next thing, we need a package from npm in order to generate the GraphQL schema for us:  npm install --save-dev grunt-graphql-php-generator",
            "title": "Implementation"
        },
        {
            "location": "/getting-started/#setting-up-a-schema-watcher",
            "text": "Now that all the dependencies are installed, you can create your first  .graphqls  schema. Let's create it at a specific location to simplify the example, under  graphql/schema.graphqls :  scalar DateTime\nscalar Cursor\n\ninterface Identifiable {\n    id: ID\n}\n\nenum Color {\n    BLUE,\n    RED,\n    YELLOW,\n    GREEN,\n    PURPLE,\n    CYAN\n}\n\ntype Item implements Identifiable {\n    id: ID,\n    name: String,\n    color: Color\n}\n\ntype Query {\n    item(id: ID): Item!\n    items(page: Int, perPage: Int): [Item!]!\n}  Once created, you will need to adjust your Gruntfile to tell it from which file to generate the schema from/to. Add this to your  Gruntfile.js :      'autogen-schema': {\n        options: {\n            source: './graphql/schema.graphqls',\n            destination: './[BaseFolder]/GraphQL/Schema/',\n            generatorCmdPath: './vendor/bin/graphqlgen',\n            namespace: '[BaseNamespace]',\n            deleteAndRecreate: true,\n            runPHPCSFixer: true\n        }\n    }  Now, you can run a Grunt command to generate the files required by the framework for you:  grunt autogen-schema",
            "title": "Setting up a schema watcher"
        },
        {
            "location": "/getting-started/#entry-point",
            "text": "The entry point requires access to a PSR-7 request object, and it will respond in a PSR-7 response. The core requirement to handle a GraphQL is the following:  $configuration = GraphQLConfiguration::create()\n    ->setControllersDirectory(__DIR__ . '\\\\[BaseNamespace]\\\\GraphQL\\\\Controllers')\n    ->setGeneratedSchemaDirectory(__DIR__ . '\\\\[BaseNamespace]\\\\GraphQL\\\\GeneratedSchema');\n\n// Assume $request contains the PSR-7 request.\n$entryPoint = new HttpEntryPoint($configuration);\n$response = $entryPoint->executeRequest($request);\n\n// $response contains the PSR-7 response  You should now be able to query the GraphQL entry point. It will give out its introspection result, but it won't execute any query successfully since we have defined no controller yet.",
            "title": "Entry point"
        },
        {
            "location": "/getting-started/#query-controller",
            "text": "Let's define a sample query controller to get a single item. It should be located under  [BaseDirectory]\\GraphQL\\Controllers . Since we want to get the  item  field in the  Query  type defined in the schema higher up, we need a  QueryController :  <?php\n\nclass QueryController extends BaseController {\n    public function getItem() {\n        return $this->hydrator->fromSimpleArray(ItemDTO::class, [\n            'id' => $this->context->getArgument('id'),\n        ];\n    }\n}  Here, we simply return an  ItemDTO , which is the representation of what querying  Item  in an object. These DTOs are made by the generator to aid in development mostly.  Now, the following query should work:  query {\n    item(id: 1) {\n        id\n    }\n}",
            "title": "Query controller"
        },
        {
            "location": "/generator/",
            "text": "Schema generator\n\n\nAn external library is used to transform a \ngraphqls\n (GraphQL Schema) file into its relevant parts which is essential to get this library to work by itself.\n\n\nGrunt tooling\n\n\nThe schema generator does need PHP to be installed locally, along with NodeJS and Grunt. This assumes you have an initialized \npackage.json\n. \n\n\ncomposer install --dev graphql-generator\nnpm install --save-dev grunt-graphql-php-generator\n\n\n\n\nAfterwards, the generator needs to be configured through the Gruntfile by adding an entry to Grunt's \ninitConfig\n object:\n\n\n    'autogen-schema': {\n        options: {\n            source: '{FilePathOfGraphQLSchema}',\n            destination: '{GeneratedSchemaDirectory}',\n            generatorCmdPath: './vendor/bin/graphqlgen',\n            namespace: '{NamespaceOfGraphQLSchema}',\n            deleteAndRecreate: {true:if you want to delete and recreate GraphQL files everytime},\n            runPHPCSFixer: {true:to code format in PSR-1/2}\n        }\n    }\n\n\n\n\nThe generator can then be ran with \n\n\ngrunt autogen-schema",
            "title": "Schema generator"
        },
        {
            "location": "/generator/#schema-generator",
            "text": "An external library is used to transform a  graphqls  (GraphQL Schema) file into its relevant parts which is essential to get this library to work by itself.",
            "title": "Schema generator"
        },
        {
            "location": "/generator/#grunt-tooling",
            "text": "The schema generator does need PHP to be installed locally, along with NodeJS and Grunt. This assumes you have an initialized  package.json .   composer install --dev graphql-generator\nnpm install --save-dev grunt-graphql-php-generator  Afterwards, the generator needs to be configured through the Gruntfile by adding an entry to Grunt's  initConfig  object:      'autogen-schema': {\n        options: {\n            source: '{FilePathOfGraphQLSchema}',\n            destination: '{GeneratedSchemaDirectory}',\n            generatorCmdPath: './vendor/bin/graphqlgen',\n            namespace: '{NamespaceOfGraphQLSchema}',\n            deleteAndRecreate: {true:if you want to delete and recreate GraphQL files everytime},\n            runPHPCSFixer: {true:to code format in PSR-1/2}\n        }\n    }  The generator can then be ran with   grunt autogen-schema",
            "title": "Grunt tooling"
        },
        {
            "location": "/configuration/",
            "text": "Configuration Object\n\n\nThe configuration object is an essential part of the framework. Access to it is provided to the underlying controllers, and essentially your whole execution context afterwards.\n\n\nRequired configuration\n\n\nThe following snippet of code outlines the required configuration object.\n\n\n<?php\n\n$configuration = FrameworkConfiguration::create()\n    // Directory which contains your controllers   \n    ->setControllersDirectory(\"./graphql/Controllers\")\n    // Directory which contains your generated schema\n    ->setGeneratedSchemaDirectory(\"./graphql/Schema\");\n\n\n\n\nAdditional configuration\n\n\n<?php\n\n$configuration = FrameworkConfiguration::create()\n    // Enables development mode. Refer to doc section for more info.\n    ->enableDevMode()\n    // Sets a PSR-3 logger interface to be used by the framework itself.\n    ->setLogger($logger);\n\n\n\n\nCustom context\n\n\nNeeds arise to pass information through the framework back to your business logic. A custom context includes elements that are agnostic to the framework, but that are still needed to make your application work correctly. For example:\n\n\n\n\nThe authentication context\n\n\nCore services context (database, logging)\n\n\nService locators\n\n\n\n\n<?php\n$config = new FrameworkConfiguration();\n\n// Custom context definition\nclass CustomContext {\n    public $username;\n    public $userId;\n}\n\n// Initialize custom context\n$context = new CustomContext();\n$context->username = 'test';\n$context->userId = 1;\n\n// Set it in framework configuration\n$config->setCustomContext($context);\n\n// Initialize framework from config\n// ...\n\n\n\n\nYou can define any class you want as your custom context. Just be aware that it can only be set in the initial configuration (but the internals of it can be modified later down the road).\n\n\nAccessing the custom context\n\n\nThe custom context can then be accessed from the controller.\n\n\n<?php\nclass Controller extends BaseController\n{\n    public function getField() \n    {\n        // Fetch custom context. Also, set doccomment to provide autocompletion of it.\n        /** @var CustomContext $context */\n        $context = $this->context->getConfiguration()->getCustomContext();\n\n        // User ID: 1, Username: test\n        echo \"User ID: {$context->userId}, Username: {$context->username}\";\n    }\n}\n\n\n\n\nMiddlewares\n\n\nMiddlewares can alter GraphQL requests and response processed through the framework.\n\n\nThey can be set globally through the configuration object:\n\n\n<?php\n$configuration = FrameworkConfiguration::create();\n\n// Initialize a dummy middleware\n$relayMiddleware = new RelayMiddleware('id');\n\n// Add then remove middleware\n$configuration->addMiddleware($relayMiddleware);\n$configuration->removeMiddleware($relayMiddleware);",
            "title": "Configuration"
        },
        {
            "location": "/configuration/#configuration-object",
            "text": "The configuration object is an essential part of the framework. Access to it is provided to the underlying controllers, and essentially your whole execution context afterwards.",
            "title": "Configuration Object"
        },
        {
            "location": "/configuration/#required-configuration",
            "text": "The following snippet of code outlines the required configuration object.  <?php\n\n$configuration = FrameworkConfiguration::create()\n    // Directory which contains your controllers   \n    ->setControllersDirectory(\"./graphql/Controllers\")\n    // Directory which contains your generated schema\n    ->setGeneratedSchemaDirectory(\"./graphql/Schema\");",
            "title": "Required configuration"
        },
        {
            "location": "/configuration/#additional-configuration",
            "text": "<?php\n\n$configuration = FrameworkConfiguration::create()\n    // Enables development mode. Refer to doc section for more info.\n    ->enableDevMode()\n    // Sets a PSR-3 logger interface to be used by the framework itself.\n    ->setLogger($logger);",
            "title": "Additional configuration"
        },
        {
            "location": "/configuration/#custom-context",
            "text": "Needs arise to pass information through the framework back to your business logic. A custom context includes elements that are agnostic to the framework, but that are still needed to make your application work correctly. For example:   The authentication context  Core services context (database, logging)  Service locators   <?php\n$config = new FrameworkConfiguration();\n\n// Custom context definition\nclass CustomContext {\n    public $username;\n    public $userId;\n}\n\n// Initialize custom context\n$context = new CustomContext();\n$context->username = 'test';\n$context->userId = 1;\n\n// Set it in framework configuration\n$config->setCustomContext($context);\n\n// Initialize framework from config\n// ...  You can define any class you want as your custom context. Just be aware that it can only be set in the initial configuration (but the internals of it can be modified later down the road).",
            "title": "Custom context"
        },
        {
            "location": "/configuration/#accessing-the-custom-context",
            "text": "The custom context can then be accessed from the controller.  <?php\nclass Controller extends BaseController\n{\n    public function getField() \n    {\n        // Fetch custom context. Also, set doccomment to provide autocompletion of it.\n        /** @var CustomContext $context */\n        $context = $this->context->getConfiguration()->getCustomContext();\n\n        // User ID: 1, Username: test\n        echo \"User ID: {$context->userId}, Username: {$context->username}\";\n    }\n}",
            "title": "Accessing the custom context"
        },
        {
            "location": "/configuration/#middlewares",
            "text": "Middlewares can alter GraphQL requests and response processed through the framework.  They can be set globally through the configuration object:  <?php\n$configuration = FrameworkConfiguration::create();\n\n// Initialize a dummy middleware\n$relayMiddleware = new RelayMiddleware('id');\n\n// Add then remove middleware\n$configuration->addMiddleware($relayMiddleware);\n$configuration->removeMiddleware($relayMiddleware);",
            "title": "Middlewares"
        },
        {
            "location": "/controllers/",
            "text": "Controllers\n\n\nControllers act as automatic resolvers for the incoming GraphQL queries. \n\n\nNaming convention\n\n\nAll controllers should be named \n{TypeName}Controller\n \nand\n be located under the controllers directory as defined in the \nRequired configuration section\n. Resolution of a controller by name is recursive, so subdirectories can be created under the given directory.\n\n\nAdditionnally, a controller must extend a specific existing one in order to determine which type to use:\n\n\n\n\nBaseController\n: For \nObject types\n\n\nScalarController\n: For \nScalar types\n\n\nInterfaceController\n: For \nInterface types\n \n\n\n\n\nContext\n\n\nA context is provided to all controller base implementations. It is accessed through \n$this->context\n.\n\n\n\n\ngetConfiguration()\n: Returns the configuration initially passed to the framework.\n\n\ngetCurrentParentObject()\n: Returns the result of the parent call.\n\n\ngetArguments()\n: Returns all the arguments provided to the level of this query. Always an array, but empty if it was going to be null.\n\n\ngetArgument($path)\n: Returns an argument by path. For example:\n\n\n\n\n<?php\n$arguments = [\n    'a' => [\n        'b' => true\n    ]\n];\n\n// Can be queried with...\n$this->getArgument('a.b'); // Returns true\n\n\n\n\n\n\ngetFullQueryString()\n: Returns the full query string passed to the client.\n\n\ngetIdFromArgument($path)\n: Returns the id contained in a Relay argument. Also requires a dot-notation path like \ngetArgument\n.\n\n\n\n\nThe context object is immutable, which means the controller cannot modify it by itself. It is altered between every controller call by the inner framework, but it cannot be modified by the controllers themselves.\n\n\nObject type resolution\n\n\nDerived from the base class \nBaseController\n.\n\n\nOnce the matching controller is found, a function matching the detailed field is then sought in the format \nget{FieldName}\n. The function is then called, and its result returned to be processed by the middleware, and ultimately to be returned to the original client.\n\n\nHydrators\n\n\nHydrators can convert an array to any DTO object from a given definition. See \nAdvanced data handling\n for more details.\n\n\nScalar type resolution\n\n\nThe scalar types controllers defined in the application should derive a special controller called \nScalarTypeController\n. They are not associated with the base controller by itself and they have no access to the application context directly. Scalar type controller \nneed to\n extend \nScalarController\n.\n\n\nAll methods that must be implemented by it are found in the scalar controller:\n\n\n\n\nserializeScalarValue($value)\n: For outgoing requests. Takes \n$value\n and converts it into a format that is to be read by the client.\n\n\ngetScalarFromValue($value)\n & \ngetScalarFromLiteral($literalValue)\n: From incoming requests arguments. Takes \n$value\n and converts it into a format that is going to be processed by the controller. Both functions should return the same value.\n\n\n\n\nInterface type resolution\n\n\nInterface types controllers derive from the \nInterfaceController\n. It contains a single function called \nresolveInterfaceType($value)\n. This function is executed when a response is sent to the client, and \n$value\n is encapsulated in a DTO at this point. This should return the type name of \n$value\n as a string known by the \nTypeStore\n.",
            "title": "Controllers"
        },
        {
            "location": "/controllers/#controllers",
            "text": "Controllers act as automatic resolvers for the incoming GraphQL queries.",
            "title": "Controllers"
        },
        {
            "location": "/controllers/#naming-convention",
            "text": "All controllers should be named  {TypeName}Controller   and  be located under the controllers directory as defined in the  Required configuration section . Resolution of a controller by name is recursive, so subdirectories can be created under the given directory.  Additionnally, a controller must extend a specific existing one in order to determine which type to use:   BaseController : For  Object types  ScalarController : For  Scalar types  InterfaceController : For  Interface types",
            "title": "Naming convention"
        },
        {
            "location": "/controllers/#context",
            "text": "A context is provided to all controller base implementations. It is accessed through  $this->context .   getConfiguration() : Returns the configuration initially passed to the framework.  getCurrentParentObject() : Returns the result of the parent call.  getArguments() : Returns all the arguments provided to the level of this query. Always an array, but empty if it was going to be null.  getArgument($path) : Returns an argument by path. For example:   <?php\n$arguments = [\n    'a' => [\n        'b' => true\n    ]\n];\n\n// Can be queried with...\n$this->getArgument('a.b'); // Returns true   getFullQueryString() : Returns the full query string passed to the client.  getIdFromArgument($path) : Returns the id contained in a Relay argument. Also requires a dot-notation path like  getArgument .   The context object is immutable, which means the controller cannot modify it by itself. It is altered between every controller call by the inner framework, but it cannot be modified by the controllers themselves.",
            "title": "Context"
        },
        {
            "location": "/controllers/#object-type-resolution",
            "text": "Derived from the base class  BaseController .  Once the matching controller is found, a function matching the detailed field is then sought in the format  get{FieldName} . The function is then called, and its result returned to be processed by the middleware, and ultimately to be returned to the original client.",
            "title": "Object type resolution"
        },
        {
            "location": "/controllers/#hydrators",
            "text": "Hydrators can convert an array to any DTO object from a given definition. See  Advanced data handling  for more details.",
            "title": "Hydrators"
        },
        {
            "location": "/controllers/#scalar-type-resolution",
            "text": "The scalar types controllers defined in the application should derive a special controller called  ScalarTypeController . They are not associated with the base controller by itself and they have no access to the application context directly. Scalar type controller  need to  extend  ScalarController .  All methods that must be implemented by it are found in the scalar controller:   serializeScalarValue($value) : For outgoing requests. Takes  $value  and converts it into a format that is to be read by the client.  getScalarFromValue($value)  &  getScalarFromLiteral($literalValue) : From incoming requests arguments. Takes  $value  and converts it into a format that is going to be processed by the controller. Both functions should return the same value.",
            "title": "Scalar type resolution"
        },
        {
            "location": "/controllers/#interface-type-resolution",
            "text": "Interface types controllers derive from the  InterfaceController . It contains a single function called  resolveInterfaceType($value) . This function is executed when a response is sent to the client, and  $value  is encapsulated in a DTO at this point. This should return the type name of  $value  as a string known by the  TypeStore .",
            "title": "Interface type resolution"
        },
        {
            "location": "/entry/",
            "text": "Entry Point\n\n\nThe entry points are used for initializing a call to the GraphQL framework. Queries can come from multiple sources, such as an HTTP request or an inner service call. Entry points provide a way of calling the inner GraphQL framework logic through standard ways.\n\n\nHttpEntryPoint\n\n\nThis entry point takes a standardized HTTP request (PSR-7) as its initial values, and returns a PSR-7 HTTP response. The configuration object must also be passed here.\n\n\n// Setup configuration\n$configuration = FrameworkConfiguration::create();\n// ...\n\n// Fetch PSR-7 Request\n$request = Request::fromGlobals();\n\n// Execute from EntryPoint\n$entryPoint = new HttpEntryPoint($configuration);\n$response = $entryPoint->executeRequest($request);\n\n// Further handle PSR-7 response here",
            "title": "Entry Point"
        },
        {
            "location": "/entry/#entry-point",
            "text": "The entry points are used for initializing a call to the GraphQL framework. Queries can come from multiple sources, such as an HTTP request or an inner service call. Entry points provide a way of calling the inner GraphQL framework logic through standard ways.",
            "title": "Entry Point"
        },
        {
            "location": "/entry/#httpentrypoint",
            "text": "This entry point takes a standardized HTTP request (PSR-7) as its initial values, and returns a PSR-7 HTTP response. The configuration object must also be passed here.  // Setup configuration\n$configuration = FrameworkConfiguration::create();\n// ...\n\n// Fetch PSR-7 Request\n$request = Request::fromGlobals();\n\n// Execute from EntryPoint\n$entryPoint = new HttpEntryPoint($configuration);\n$response = $entryPoint->executeRequest($request);\n\n// Further handle PSR-7 response here",
            "title": "HttpEntryPoint"
        },
        {
            "location": "/development-mode/",
            "text": "Development Mode\n\n\nFor now, enabling the development mode simply allows exceptions to pass through the underlying GraphQL service to the HTTP frontend. This essentially makes debugging much easier.",
            "title": "Development Mode"
        },
        {
            "location": "/development-mode/#development-mode",
            "text": "For now, enabling the development mode simply allows exceptions to pass through the underlying GraphQL service to the HTTP frontend. This essentially makes debugging much easier.",
            "title": "Development Mode"
        },
        {
            "location": "/advanced-data-handling/",
            "text": "Advanced data handling\n\n\nWhen receiving data from the underlying GraphQL library, it is received in an array format, like so:\n\n\n$args = [\n    'fieldOne' => 1,\n    'fieldTwo' => 2\n];\n\n// Get simple fields from args\n$fieldOneVal = $args['fieldOne'];\n$fieldTwoVal = $args['fieldTwo'];\n\n// The field might be set, but not always\n$fieldThreeVal = array_key_exists($args['fieldThree']) ? $args['fieldThree'] : null;\n\n\n\n\nAlong with creating a lot of code just for the fetching logic, the latter case can become problematic assuming a scalar type can also be given a null value through the GraphQL API. Also, a distinction needs to be made between \nUser did not set field\n and \nUser forcefully set field to null\n, which is not possible with this code.\n\n\nHydrators\n\n\nHydrators allow an array data structure to be translated into a DTO.\n\n\nBy calling \n$this->hydrator->fromSimpleArray($dtoFQN, $data)\n in a controller, you can create a DTO instance filled with values. Undefined values by the user are set to an instance of \nUndefinedValue\n.\n\n\nExample:\n\n\n// DTO Code\npublic class SampleDTO \n{\n    public $fieldOne;\n    public $fieldTwo;\n    public $fieldThree;\n}\n\n// (Arguments passed to query)\n$args = [\n    'fieldOne' => 1,\n    'fieldTwo' => null,\n];\n\n// Controller function code (from arguments)\n/** @var SampleDTO $dto */\n$dto = $this->hydrator->fromSimpleArray(SampleDTO::class, $this->getContext()->getCurrentArguments());\n\n\n\n\nResult:\n\n\n$dto->fieldOne === 1;\n$dto->fieldTwo === null;\n$dto->fieldThree instanceof UndefinedValue;\n\n\n\n\nNested DTOs\n\n\nSometimes, it is necessary to nest DTOs. The hydrators can be provided with a class extending \nBaseDTODefinition\n. This class contains an array definition of the DTO, describing what is to be nested or not. \n\n\nThe class should look as follows:\n\n\nclass DTODefinitionName\n{\n    public function __construct()\n    {\n        $this->dtoDefinition = [\n            'fqn' => RootDTO::class, // ClassName of the root DTO\n            'fields' => [ // Optional: in this case, subField & subField2 nest DTOs\n                'subField' => DepthSubDTO::class, // Shorthand: 'fieldNameInRootDTO' => dtoContainedInFieldClassName (this shorthand is usable since subField doesn't nest any deeper)\n                'subField2' => [ // Deep nesting\n                    'fqn' => DeepNestedDTO::class, // Same as root definition\n                    'fields' => [ // Once again, only put fields with a depth in here\n                        'lastDTO' => LastDTO::class, // Same as before, 'fieldNameInRootDTO' => dtoContainedInFieldClassName,\n                        // ... Additional nesting levels work like the initial one\n                    ]\n                ]\n            ]\n        ];\n    }\n}\n\n\n\n\nAfterwards, you can pass the DTO definition class name in a controller:\n\n\n// $data being the input array\n$dto = $this->hydrator->fromDTODefinition(DTODefinitionName::class, $data);\n\n\n\n\nThe returned DTO will be filled with nested values. Be careful as an unset nested value will return an \nUndefinedValue\n in the DTO instead of the initially wanted DTO.",
            "title": "Advanced data handling"
        },
        {
            "location": "/advanced-data-handling/#advanced-data-handling",
            "text": "When receiving data from the underlying GraphQL library, it is received in an array format, like so:  $args = [\n    'fieldOne' => 1,\n    'fieldTwo' => 2\n];\n\n// Get simple fields from args\n$fieldOneVal = $args['fieldOne'];\n$fieldTwoVal = $args['fieldTwo'];\n\n// The field might be set, but not always\n$fieldThreeVal = array_key_exists($args['fieldThree']) ? $args['fieldThree'] : null;  Along with creating a lot of code just for the fetching logic, the latter case can become problematic assuming a scalar type can also be given a null value through the GraphQL API. Also, a distinction needs to be made between  User did not set field  and  User forcefully set field to null , which is not possible with this code.",
            "title": "Advanced data handling"
        },
        {
            "location": "/advanced-data-handling/#hydrators",
            "text": "Hydrators allow an array data structure to be translated into a DTO.  By calling  $this->hydrator->fromSimpleArray($dtoFQN, $data)  in a controller, you can create a DTO instance filled with values. Undefined values by the user are set to an instance of  UndefinedValue .  Example:  // DTO Code\npublic class SampleDTO \n{\n    public $fieldOne;\n    public $fieldTwo;\n    public $fieldThree;\n}\n\n// (Arguments passed to query)\n$args = [\n    'fieldOne' => 1,\n    'fieldTwo' => null,\n];\n\n// Controller function code (from arguments)\n/** @var SampleDTO $dto */\n$dto = $this->hydrator->fromSimpleArray(SampleDTO::class, $this->getContext()->getCurrentArguments());  Result:  $dto->fieldOne === 1;\n$dto->fieldTwo === null;\n$dto->fieldThree instanceof UndefinedValue;",
            "title": "Hydrators"
        },
        {
            "location": "/advanced-data-handling/#nested-dtos",
            "text": "Sometimes, it is necessary to nest DTOs. The hydrators can be provided with a class extending  BaseDTODefinition . This class contains an array definition of the DTO, describing what is to be nested or not.   The class should look as follows:  class DTODefinitionName\n{\n    public function __construct()\n    {\n        $this->dtoDefinition = [\n            'fqn' => RootDTO::class, // ClassName of the root DTO\n            'fields' => [ // Optional: in this case, subField & subField2 nest DTOs\n                'subField' => DepthSubDTO::class, // Shorthand: 'fieldNameInRootDTO' => dtoContainedInFieldClassName (this shorthand is usable since subField doesn't nest any deeper)\n                'subField2' => [ // Deep nesting\n                    'fqn' => DeepNestedDTO::class, // Same as root definition\n                    'fields' => [ // Once again, only put fields with a depth in here\n                        'lastDTO' => LastDTO::class, // Same as before, 'fieldNameInRootDTO' => dtoContainedInFieldClassName,\n                        // ... Additional nesting levels work like the initial one\n                    ]\n                ]\n            ]\n        ];\n    }\n}  Afterwards, you can pass the DTO definition class name in a controller:  // $data being the input array\n$dto = $this->hydrator->fromDTODefinition(DTODefinitionName::class, $data);  The returned DTO will be filled with nested values. Be careful as an unset nested value will return an  UndefinedValue  in the DTO instead of the initially wanted DTO.",
            "title": "Nested DTOs"
        }
    ]
}