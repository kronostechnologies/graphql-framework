<?php

/**
 * GraphQL Service configuration, which must be passed from the service initially.
 */
class GraphQLConfiguration
{
    /**
     * Directory belonging to the GraphQL controllers in the project.
     *
     * @var string
     */
    protected $controllersDirectory;

    /**
     * Namespace belonging to the GraphQL controllers in the project.
     *
     * @var string
     */
    protected $controllersNamespace;

	/**
	 * Directory of the auto-generated schema.
	 *
	 * @var string
	 */
    protected $generatedSchemaDirectory;

	/**
	 * Namespace of the auto-generated schema from a graphqls file.
	 *
	 * @var string
	 */
    protected $generatedSchemaNamespace;

    /**
     * PSR-4 logger instance for the GraphQL service.
     *
     * @var mixed
     */
    protected $logger;

    /**
     * Set to true to enable additional logging.
     *
     * @var bool
     */
    protected $inDevMode;

    /**
     * Name of the TypeRegistry auto-generated by the graphql-generator tool.
     *
     * @var string
     */
    protected $typeStoreClassName;

    /**
     * Sometimes, some types are not seen by a GraphQL documentation browser. Putting their FQN here
     * will display them in there.
     *
     * @var string[]
     */
    protected $additionalGraphQLTypes = [];

    /**
     * Configured type registry.
     *
     * @var TypeRegistryInterface
     */
    protected $typeRegistry;

    /**
     * @return string
     */
    public function getControllersDirectory()
    {
        return $this->controllersDirectory;
    }

    /**
     * @return string
     */
    public function getControllersNamespace()
    {
        return $this->controllersNamespace;
    }

    /**
     * @return mixed
     */
    public function getLogger()
    {
        return $this->logger;
    }

    /**
     * @return bool
     */
    public function isInDevMode()
    {
        return $this->inDevMode;
    }

	/**
	 * @return string
	 */
	public function getGeneratedSchemaDirectory()
	{
		return $this->generatedSchemaDirectory;
	}

	/**
	 * @return string
	 */
	public function getGeneratedSchemaNamespace()
	{
		return $this->generatedSchemaNamespace;
	}

    public static function create()
	{
		return new self();
	}

	/**
	 * @param string $controllersDirectory
	 * @return GraphQLConfiguration
	 */
	public function setControllersDirectory($controllersDirectory)
	{
		$this->controllersDirectory = $controllersDirectory;
		return $this;
	}

	/**
	 * @param string $controllersNamespace
	 * @return GraphQLConfiguration
	 */
	public function setControllersNamespace($controllersNamespace)
	{
		$this->controllersNamespace = $controllersNamespace;
		return $this;
	}

	/**
	 * @param string $generatedSchemaDirectory
	 * @return GraphQLConfiguration
	 */
	public function setGeneratedSchemaDirectory($generatedSchemaDirectory)
	{
		$this->generatedSchemaDirectory = $generatedSchemaDirectory;
		return $this;
	}

	/**
	 * @param string $generatedSchemaNamespace
	 * @return GraphQLConfiguration
	 */
	public function setGeneratedSchemaNamespace($generatedSchemaNamespace)
	{
		$this->generatedSchemaNamespace = $generatedSchemaNamespace;
		return $this;
	}

	/**
	 * @param mixed $logger
	 * @return GraphQLConfiguration
	 */
	public function setLogger($logger)
	{
		$this->logger = $logger;
		return $this;
	}

	/**
	 * @param bool $inDevMode
	 * @return GraphQLConfiguration
	 */
	public function setInDevMode($inDevMode)
	{
		$this->inDevMode = $inDevMode;
		return $this;
	}
}